#summary The Neurospaces developer package.

[Index]

= Introduction =

Developer utilities that comply with Neurospaces development standards.

Some of the utilities currently depend on monotone for source code version control due to their configuration.  It is possible to work with other version control systems.


= Utilities =

  * release_extract: extract release information from a monotone repository.  When a Tag is set, that will be the result, otherwise the SHA of the current base revision will be the result.
  * release_expand: do keyword expansion, see the manpage in the source for more details.
  * neurospaces_status: check the status of the source code on your machine with the monotone repositories.
  * neurospaces_build: perform various build operations, do 'neurospaces_build --help' to see how it works.  Also look at ReleaseProcedure.

= Examples =

  * See also InstallingFromScratch
  * building a release for the model-container package (see also ReleaseProcedure):
    1 Tag the code, eg. we use the tag 'build-9'
{{{
neurospaces_build --tag build-11 --verbose --verbose --verbose --no-compile --no-configure --no-install --regex model-container --developer
}}}
    1 Build the release for the tagged code:
{{{
neurospaces_build --dist --verbose --verbose --verbose --no-compile --no-configure --no-install --regex model-container --developer
}}}
    1 Or with one command line:
{{{
neurospaces_build --tag build-11 --dist --verbose --verbose --verbose --no-compile --no-configure --no-install --regex model-container --developer
}}}
    1 Upload the tarballs:
{{{
neurospaces_build --src-tag build-11 --upload-server ftp://upload.sourceforge.net/incoming --verbose --verbose --verbose --no-compile --no-configure --no-install --regex model-container --developer
}}}
    1 Do not forget to edit release notes, tag the files as 'Any', 'Source .gz', etc.

= Other Examples =

    1 Figuring out what packages are known:
{{{
neurospaces_build --packages
}}}
    1 Figuring out what actions are taken by default:
{{{
neurospaces_build --help
}}}
      and inspect the flags at the end of the output.  At this time, --configure, --compile and --install are the default actions.
    1 Figuring how operations are mapped to the packages:
{{{
neurospaces_build --help-all
}}}
    1 Figuring out what actions are taken after options have been given, eg.
{{{
neurospaces_build --distcheck --help
}}}
      will enable the distcheck target of the makefiles, in addition to the default actions.
    1 Figuring out what shell commands will be run after options have been given, without really running the commands:
{{{
neurospaces_build --verbose --distcheck --dry-run --developer
}}}
    1 Uninstalling 4 packages on your developer machine:
{{{
neurospaces_build --verbose --verbose --verbose --no-compile --no-configure --uninstall --regex '(model_container|heccer|ssp|studio)' --developer
}}}
    1 Building checked releases for four packages:
{{{
neurospaces_build --verbose --verbose --verbose --no-compile --no-configure --no-install --distcheck --regex '(model_container|heccer|ssp|studio)' --developer
}}}
    1 After a modification of the installer package, reinstall it:
{{{
neurospaces_build --enable installer --regex installer --developer --verbose --verbose --verbose
}}}
    1 Releasing the installer on sourceforge:
{{{
}}}

= Other =

  * mcad2doxy: convert obsoleted multicad documentation to doxygen format, this is working for about 60%.