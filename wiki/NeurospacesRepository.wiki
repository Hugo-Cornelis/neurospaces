#summary Using the repository for development
#labels monotone,repository

= Introduction =

For coordinated development of all components of the neurospaces project the build machine houses a monotone server that is connectible over the internet. This way changes made can be properly merged using the functions available on monotone. As a result the build mechanism will always build the most up to date version of the code.


= Checking out code =

To check out the latest version of the neurospaces project code you must first initialize a local monotone repository via this command.

  _mtn --db=myrepo.mtn db init_

Then you may pull the code from the monotone server into your working repository via the command.

  _mtn --db=myrepo.mtn pull virtual2.cbi.utsa.edu "`*`"_

The "" argument pulls all branches from the server into your local repository. To pull a specific branch look at the next section. Once the code has been pulled you can checkout one of the branches into your working directory via the command:

  _mtn --db=myrepo.mtn --branch=<Branch ID> co source_directory_





= Branches =

Since you must know the desired branch you want when pulling a specific branch, here are the branches available on the monotone server.

  _*Neurospaces Genesis SLI* - ns-genesis.sli_

If you download all branches via the "`*`" argument you can get a list of what branches are available to check out from your local repository via the command:

  _mtn --db=myrepo.mtn list branches







= Committing Changes =

To be able to commit changes to your local monotone repository you need to generate a key pair. To do this execute the command:

  _mtn genkey email@address.com_

This stores a private key for yourself in ~/.monotone. It will ask you to enter a passphrase which you'll use to verify your identification when you check in changes. To see all the keys monotone has stored you can do a:

  _mtn list keys_ 

and also an 

  _mtn --db=myrepo.mtn list keys 

If you have a monotone workspace set up for your pulled repository you can execute:

  _mtn ci_ 

To check in changes. Else you can make changes via:

  _mtn --db=myrepo.mtn ci_