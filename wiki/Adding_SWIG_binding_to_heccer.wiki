#summary This is a guide on how to add a swig perl binding to heccer.
#labels G3Doc

= Introduction =

In a previous example we created a simulation object called PulseGen for use in GENESIS 3 simulations as a callable object.  Here we will implement the necessary bindings to make the object callable from perl using SWIG. This will allow it to easily be used in the perl based applications of GENESIS such as the gshell and ssp.


----

= Source files =

The PulseGen implementation currently resides in the Heccer package in the files:

{{{
pulsegen.c
heccer/pulsegen.h
}}}


== Perl SWIG files ==

Heccer has two files where SWIG bindings are implemented:

{{{
glue/swig/perl/heccer.i
glue/swig/perl/Heccer.pm
}}}

heccer.i is a SWIG interface file which generates C code that we can compile and link against Perl headers and libraries. 

Heccer.pm is a Perl module which contains higher level function calls to the previously mentioned interface.

We will add our own bindings to these files to make the PulseGen object callable.

=== SWIG interface file heccer.i ===

First we need to include our _heccer/pulsegen.h_ header in the interface file in two places. At the top of the file with the other includes we add:

{{{
#include "heccer/pulsegen.h"
}}} 

For the module declaration we add it near the end like this:

{{{
%include "heccer/pulsegen.h"
}}}

Next we need to declare a couple of functions for retrieving object data, and for performing a step in a simulation.

This function will return a pointer to a _simobj_PulseGen_ (defined in heccer/pulsegen.h) data struct so that the calling process can get access to the objects data:

{{{
void * pulse_gen_get_driver_data(struct simobj_PulseGen *ppg)
{
    return((void *)ppg);
}
}}}

This function will be called when performing a step in a simulation:

{{{
void * pulse_gen_get_driver_method(struct simobj_PulseGen *ppg)
{
    return((void *)PulseGenSingleStep);
}
}}}


=== Perl module Heccer.pm ===


----