#summary Adding a PulseGen object to the model container.

= Introduction =

This document details the steps a developer must go through in order to add an object called "PulseGen" to the model-container.  The following steps are performed in order.


=== Add an entry to hierarchy/symbols===

The symbols file contains declarations for class types. A new set of declarations must be added for each unique object added to the model container. Again, taking the pool entry as a template, we create a new entry for our pulsegen object:

{{{
         pulse_gen => {
                 allows => {
                             'create_alias' => 'pulse_gen',
                             'get_parameter' => 'pulse_gen',
                             'parameter_scale_value' => 'pulse_gen',
                             'reduce' => 'pulse_gen',
                            },
                  annotations => {
                                  'piSymbolType2Biolevel' => 'BIOLEVEL_MECHANISM',
                                 },
                  description => 'an object that can generate a variety of pulse patterns',
                  dimensions => [
                                 'mechanism',
                                ],
                  grammar => {
                              components => [],
                              specific_allocator => 'PulseGenCalloc',
                              specific_token => {
                                                 class => 'pulse_gen',
                                                 lexical => 'TOKEN_PULSE_GEN',
                                                 purpose => 'physical',
                                                },
                              typing => {
                                         base => 'phsle',
                                         id => 'pidin',
                                         spec => 'ppulsegen',
                                         to_base => '->bio.ioh.iol.hsle',
                                        },
                             },
                  isa => 'bio_comp',
                  name => 'symtab_PulseGen',
                  parameters => {
				 LEVEL1 => 'level of pulse1',
				 LEVEL2 => 'level of pulse2',
				 WIDTH1 => 'width of pulse1',
				 WIDTH2 => 'width of pulse2',
				 DELAY1 => 'delay of pulse1',
				 DELAY2 => 'delay of pulse2',
				 BASELEVEL => 'baseline level',
				 TRIGMODE => 'Trigger mode, 0 - free run, 1 - ext trig, 2 - ext gate',
                                },
                 },
        
}}}

Because we want to have our instances of pulsegen to be output as "PulseGen," with a capital letter for each word, we declare the pulsegen with an underscore between each word. 

=== Creating Source Files ===

Now source files which had the appropriate data structures and functions must be created. Here we use the pool.c and pool.h file as a template so we make copies.

pool.c is located in the _components_ directory, and pool.h is located in _neurospaces/components_. 

*cp components/pool.c components/pulsegen.c*

*cp neurospaces/components/pool.h neurospaces/components/pulsegen.h*

Now change all references of pool to pulsegen with appropriate case. This is a good starting point as all that's needed is to determine which parameters and functions you wish to add. Also since we declared our symbol with an underscore, we must retain this format for certain parts of the file:

Our symbol generated a file called pulse_gen_vtable.c which we must properly point to in our PulseGenCalloc function.

{{{
#include "hierarchy/output/symbols/pulse_gen_vtable.c"
}}}


Again in PulseGenCalloc we must retain the underscore when the system performs a SymbolCalloc. This uses a define which is generated from our symbols entry called HIERARCHY`_`TYPE`_`symbols`_`pulse`_`gen which retains the underscore. 

{{{
 SymbolCalloc(1, sizeof(struct symtab_PulseGen), _vtable_pulse_gen, HIERARCHY_TYPE_symbols_pulse_gen);
}}}


There are two more instances in the file that use HIERARCHY`_`TYPE`_`symbols`_`pulse`_`gen. Note that if we were to have declared our symbol as "pulsegen" then the underscore wouldn't be needed in those cases, however our generated file calls would reference "Pulsegen" and not "PulseGen."


=== Include your header ===

You will need to include your new header into a few files with a line like this:

{{{
#include "neurospaces/components/pulse.h"
}}}

The following files need to have an include:

  * symboltable.c
  * parser.decl
  * neurospaces/cachedconnection.h (not in all cases)


=== Adding to compilation ===

To have your new pulse object compile into the model-container you must add to some of the existing build targets in the top level *Makefile.am* file.

In the target _libneurospacesread_a_SOURCES_ you must add:

{{{
	components/pulse.c \
}}}

The target _nobase_include_HEADERS_ add:

{{{
	neurospaces/components/pulse.h \
}}}

The target _libneurospacesread.so_ add:

{{{
	pulse.o \
}}}


After all of this it should compile and your new object is ready to use.
