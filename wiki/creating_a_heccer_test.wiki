#summary (In Progress) Creating a test for Heccer

= Introduction =

This is a guide for creating a test for the Heccer package. Since Heccer and it's associated simulation objects are all compiled into a library, programs are written in C and compiled against this library to test each use case. In this example we will create suitable tests for our PulseGen simulation object (simobj_PulseGen) that we created before[Creating_a_new_simulation_object].

= Source Files =

The source files for the Heccer tests are found in the _tests/code_ directory within the Heccer Package. 

= Adding our object to the test framework =

Since we are testing a new simulation object, we need to make the test framework aware of our object. First we must add a line to the files:

{{{
tests/code/main.c
tests/code/main.h
}}}

In _tests/code/main.c_ we add:

{{{
struct simobj_PulseGen *ppg = NULL;
}}}

Then in _tests/code/main.h_ we add:

{{{
extern struct simobj_PulseGen *ppg;
}}}

Now the main driver for the test framework is aware of our PulseGen simulation object. Next we create a source file that demonstrates a specific use case.

= Use Case =

Ideally you want to test your output against a use case which can be verified to work. Since the PulseGen object is a port of the same object used in GENESIS 2, we can obtain output from a GENESIS 2 script to compare to the output of our simulation object. 

*<working on this>*

= Adding our source files to the build =

The _tests/code_ directory has a Makefile.am which automake uses to generate a Makefile for building each test program. We only need to add some info to a couple of places and automake will handle the rest. 

In the target *check_PROGRAMS* we need to add the resulting executable for the our test program. For the case *pulsegen-freerun.c* we add:

{{{
	pulsegen-freerun \
}}}

Next we add rules to build and link our program near the bottom of the file. It is preferable to keep this in alphabetical order with the rest of the test programs build rules:

{{{
pulsegen_freerun_DEPENDENCIES = ../../libheccer.a main.c
pulsegen_freerun_LDADD = -L../.. -lheccer -lm
}}}

_Note: The resulting executable will be _pulsegen-freerun_, as defined in the first target, however to declare the accompanying build rule you must use an underscore._